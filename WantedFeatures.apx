//==============================================================================//
// Basic features
//==============================================================================//
class Person{
  var name : String
  var age : int

  function toString() : String{
    return name + " is " + age + " years old!"
  }
}

//Three different options, first is null, last two are initialized
var p : Person
var p : Person = Person()
var p = Person()

//Now p has a value
p = Person()

p.name = "Harry Potter"
p.age = 42

print(p)  //Prints "Harry potter is 42 years old!"

//==============================================================================//
// Coroutines
//==============================================================================//

class EventHandler{

  function onClick(){
    print("Ayy lmao!")
  }

  coroutine handle(e : Event) : bool{
    if(e.isMouseDown()){
      yield true;

      while(!e.isMouseUp()){
        yield false;
      }

      onClick();
      return true;
    }
    else{
      return false;
    }
  }

}

var eventHandlers : EventHandler[] = getHandlers();
var event : Event = getEvent();

while(e in eventHandlers)
  if(e.handle(event))
    break;

//==============================================================================//
// Annotations
//==============================================================================//

//                            function<void>     ?
function RequireLogin(fwd : (function() : void) ){
  if(loggedIn)
    fwd();
}

@RequireLogin
function getName(){

}

//==============================================================================//
// Templates
//==============================================================================//

class A<T> {
  T value
}

var a : A<int> = A<int>()
a.value = 2;

function getComponent<T>() : T{
  return cmp.get(T.getClass())
}

//==============================================================================//
// Automatic enforcers and other stuff
//==============================================================================//
// NOTE not sure how this should be done yet

function doStuff(a : notnull ClassType){

}

//==============================================================================//
// Out parameters
//==============================================================================//

function raycast(ray : Ray, hitInfo : out HitInfo){
  hitInfo = HitInfo();
  //Do stuff
}

var hitInfo : HitInfo
raycast(ray, hitInfo)

//Now hitInfo has a value

//==============================================================================//
// Multiple return types
//==============================================================================//

//See Symmetry
symetric function intersects(line : Line, plane : Plane) : (bool, Vector3){
  //Do your calculations
  return true, point
}

//Explicit typing
var intersection : bool, point : Vector3 = intersects(line, plane)

//Implicit typing
var intersection, point = intersects(line, plane)

//==============================================================================//
// Flow Control
//==============================================================================//

if a {

}
if(a){

}
else if b{

}
else{

}

//NOTE No break needed, use continue if you want the old non-break features
switch a {
  case 0,1,2,3,4  : print("Niet harry potter")
  case 1          : print("Harry potter")
  default         : print("No sir.")
}

//==============================================================================//
// Defer syntax
//==============================================================================//

function main(){
  print("1")

  defer print("5")
  defer print("4")
  defer print("3")

  print("2")
}

//Prints
// 1
// 2
// 3
// 4
// 5

//==============================================================================//
// Symmetry
//==============================================================================//

class Line{
  //...
}
class Plane{
  // ...
}

symetric function intersects(a : Line, b : plane) : boolean { /*...*/ }

var line : Line
var plane : plane

if(intersects(line, plane)) {}
if(intersects(plane, line)) {}

//==============================================================================//
// Dynamic functions
//==============================================================================//

class GameObject{
  //...
}
class Player extends GameObject{
  // ...
}

dynamic function compute(player : Player)         { console.println("player compute") }
dynamic function compute(gameObject : GameObject) { console.println("object compute") }

var object : GameObject = GameObject()
var player : GameObject = Player()

//With dynamic
compute(player) // player compute
compute(object) // object compute

//Without dynamic
compute(player) // object compute
compute(object) // object compute



//==============================================================================//
// Member functions
//==============================================================================//

//NOTE functions are automatically always virtual. This is to not confuse people
class GameObject{
  function update() {};
}

class Player extends GameObject{
  function update() {};
}

var player : Player
var gameObject : GameObject

player.update()
gameObject.update()

//Not sure if this is going to happen
update(player)
update(gameObject)

//==============================================================================//
// Cross Referencing
//==============================================================================//

//Normal cross referencing
class Node{
  var doc : Document
}
class Document{
  var root : Node
}

//Agressive cross referencing
class A {
  static var instance = A()
  static var p = B.p()
}
class B {
  static function p() : A { return C().a }
}
class C {
  var a = A.instance
}



//==============================================================================//
// April fools
//==============================================================================//
//keyword private and protected removed in favour of public,
//because of demands by nsa, no further information can be provided
